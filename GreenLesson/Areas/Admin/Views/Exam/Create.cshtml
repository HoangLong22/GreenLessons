@model Model.EF.Exam

@{
    ViewBag.Title = "Create";
    Layout = "~/Areas/Admin/Views/Shared/_Layout.cshtml";
    var session = (UserLogin)Session[GreenLesson.Common.CommonContants.USER_SESSION];
}

@section jsFooter {
    <script>
        $('#btnSelectImage').on('click', function (e) {
            e.preventDefault();
            var finder = new CKFinder();
            finder.selectActionFunction = function (url) {
                $('#txtImage').val(url);
            };
            finder.popup();
        })
        var editor = CKEDITOR.replace('txtcontent', {
            customConfig: '/Assets/Admin/js/plugins/ckeditor/config.js',
        });
    </script>

    <script language="javascript">
            function ChangeToSlug()
            {
                var title, slug;

                //Lấy text từ thẻ input title
                title = document.getElementById("title").value;

                //Đổi chữ hoa thành chữ thường
                slug = title.toLowerCase();

                //Đổi ký tự có dấu thành không dấu
                slug = slug.replace(/á|à|ả|ạ|ã|ă|ắ|ằ|ẳ|ẵ|ặ|â|ấ|ầ|ẩ|ẫ|ậ/gi, 'a');
                slug = slug.replace(/é|è|ẻ|ẽ|ẹ|ê|ế|ề|ể|ễ|ệ/gi, 'e');
                slug = slug.replace(/i|í|ì|ỉ|ĩ|ị/gi, 'i');
                slug = slug.replace(/ó|ò|ỏ|õ|ọ|ô|ố|ồ|ổ|ỗ|ộ|ơ|ớ|ờ|ở|ỡ|ợ/gi, 'o');
                slug = slug.replace(/ú|ù|ủ|ũ|ụ|ư|ứ|ừ|ử|ữ|ự/gi, 'u');
                slug = slug.replace(/ý|ỳ|ỷ|ỹ|ỵ/gi, 'y');
                slug = slug.replace(/đ/gi, 'd');
                //Xóa các ký tự đặt biệt
                slug = slug.replace(/\`|\~|\!|\|\#|\||\$|\%|\^|\&|\*|\(|\)|\+|\=|\,|\.|\/|\?|\>|\<|\'|\"|\:|\;|_/gi, '');
                //Đổi khoảng trắng thành ký tự gạch ngang
                slug = slug.replace(/ /gi, "-");
                //Đổi nhiều ký tự gạch ngang liên tiếp thành 1 ký tự gạch ngang
                //Phòng trường hợp người nhập vào quá nhiều ký tự trắng
                slug = slug.replace(/\-\-\-\-\-/gi, '-');
                slug = slug.replace(/\-\-\-\-/gi, '-');
                slug = slug.replace(/\-\-\-/gi, '-');
                slug = slug.replace(/\-\-/gi, '-');
                //Xóa các ký tự gạch ngang ở đầu và cuối
                @*slug = '@' + slug + '@';
                slug = slug.replace(/\@\-|\-\@|\@/gi, '');*@
                //In slug ra textbox có id “slug”
                document.getElementById('slug').value = slug;
            }
    </script>
}
<section class="content-header">
    <div class="container-fluid">
        <div class="row mb-2">
            <div class="col-sm-6">
                <h1>Thêm mới đề thi</h1>
            </div>
            <div class="col-sm-6">
                <ol class="breadcrumb float-sm-right">
                    <li class="breadcrumb-item"><a href="#">Home</a></li>
                    <li class="breadcrumb-item active">Exam</li>
                    <li class="breadcrumb-item active">Create</li>
                </ol>
            </div>
        </div>
    </div><!-- /.container-fluid -->
</section>
<section class="content">
    <div class="container-fluid">
        <div class="card card-default">
            <div class="card-header">
                <h3 class="card-title">Thêm mới đề thi</h3>
            </div>
            @using (Html.BeginForm())
            {
                @Html.AntiForgeryToken()
                @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                <div class="card-body">
                    <div class="row">
                        <div class="col-md-6">

                            <div class="form-group">
                                @Html.LabelFor(model => model.Name)
                                @Html.TextBox("Name", null, new { @class = "form-control", id="title", onkeyup = "ChangeToSlug();" })
                                @Html.ValidationMessageFor(model => model.Name, "", new { @class = "text-danger" })
                            </div>

                            <div class="form-group">
                                @Html.LabelFor(model => model.Description)
                                @Html.TextBox("Description", null, new { @class = "form-control" })
                                @Html.ValidationMessageFor(model => model.Description, "", new { @class = "text-danger" })
                            </div>
                            <!-- /.form-group -->
                            <div class="form-group">
                                @Html.LabelFor(model => model.CourseName)
                                @Html.DropDownList("CourseName", null, new { @class = "form-control" })
                                @Html.ValidationMessageFor(model => model.CourseName, "", new { @class = "text-danger" })
                            </div>

                            @*<div class="form-group">
                                    @Html.LabelFor(model => model.CourseName)
                                    @Html.DropDownList("CourseName", null, new { @class = "form-control" })
                                    @Html.ValidationMessageFor(model => model.CourseName, "", new { @class = "text-danger" })
                                </div>*@

                            <!-- /.form-group -->
                        </div>
                        <!-- /.col -->
                        <div class="col-md-6">
                            <div class="form-group">
                                @Html.LabelFor(model => model.MetaTitle)
                                @Html.TextBox("MetaTitle", null, new { @class = "form-control", id="slug" })
                                @Html.ValidationMessageFor(model => model.MetaTitle, "", new { @class = "text-danger" })
                            </div>

                            <div class="form-group">
                                @Html.LabelFor(model => model.UserBy)
                                @Html.TextBox("UserBy", null, new { @class = "form-control", @Value = @session.UserName, @readonly = "readonly" })
                                @Html.ValidationMessageFor(model => model.UserBy, "", new { @class = "text-danger" })
                            </div>

                            <div class="form-group">
                                @Html.LabelFor(model => model.Image)
                                @Html.TextBox("Image", null, new { @class = "form-control", id = "txtImage" })
                                <a id="btnSelectImage" href="#">Chọn hình ảnh</a>
                                @Html.ValidationMessageFor(model => model.Image, "", new { @class = "text-danger" })
                            </div>

                        </div>
                        <!-- /.col -->
                        <div class="form-group">
                            @Html.LabelFor(model => model.Content)
                            @Html.TextArea("Content", new { @class = "form-control", id = "txtcontent" })
                            @Html.ValidationMessageFor(model => model.Content, "", new { @class = "text-danger" })
                        </div>
                        <div class="form-group">
                            @Html.LabelFor(model => model.Status)
                            <br />
                            @Html.CheckBox("Status", new { htmlAttributes = new { @class = "form-control" } })
                            Kích hoạt
                            @Html.ValidationMessageFor(model => model.Status, "", new { @class = "text-danger" })

                        </div>

                    </div>
                    <div class="form-group">
                        <div class="col-md-offset-2 col-md-10">
                            <input type="submit" value="Thêm mới" class="btn btn-default" />
                        </div>
                    </div>
                </div>
            }
        </div>
    </div>
</section>
<div>
    @Html.ActionLink("Back to List", "Index")
</div>
